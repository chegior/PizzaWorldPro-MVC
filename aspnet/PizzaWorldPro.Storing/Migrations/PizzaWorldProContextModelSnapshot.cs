// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PizzaWorldPro.Storing;

namespace PizzaWorldPro.Storing.Migrations
{
    [DbContext(typeof(PizzaWorldProContext))]
    partial class PizzaWorldProContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("APizzaModelToppings", b =>
                {
                    b.Property<long>("PizzaEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("PizzaToppingsEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("PizzaEntityId", "PizzaToppingsEntityId");

                    b.HasIndex("PizzaToppingsEntityId");

                    b.ToTable("APizzaModelToppings");
                });

            modelBuilder.Entity("PizzaWorldPro.Domain.Abstracts.APizzaModel", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("CrustEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrderEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("PizzaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PizzaPrice")
                        .HasColumnType("float");

                    b.Property<long?>("SizeEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("CrustEntityId");

                    b.HasIndex("OrderEntityId");

                    b.HasIndex("SizeEntityId");

                    b.ToTable("APizzaModel");
                });

            modelBuilder.Entity("PizzaWorldPro.Domain.Models.Crust", b =>
                {
                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ItemPrice")
                        .HasColumnType("float");

                    b.HasKey("EntityId");

                    b.ToTable("Crusts");

                    b.HasData(
                        new
                        {
                            EntityId = 1L,
                            ItemName = "Regular",
                            ItemPrice = 1.0
                        },
                        new
                        {
                            EntityId = 2L,
                            ItemName = "Thin-Flat",
                            ItemPrice = 1.25
                        },
                        new
                        {
                            EntityId = 3L,
                            ItemName = "Stuffed",
                            ItemPrice = 1.5
                        });
                });

            modelBuilder.Entity("PizzaWorldPro.Domain.Models.Order", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<double>("OrderPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("StoreEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("StoreEntityId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PizzaWorldPro.Domain.Models.Size", b =>
                {
                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ItemPrice")
                        .HasColumnType("float");

                    b.HasKey("EntityId");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            EntityId = 1L,
                            ItemName = "Piccola",
                            ItemPrice = 1.0
                        },
                        new
                        {
                            EntityId = 2L,
                            ItemName = "Medio",
                            ItemPrice = 1.25
                        },
                        new
                        {
                            EntityId = 3L,
                            ItemName = "Familiare",
                            ItemPrice = 1.5
                        });
                });

            modelBuilder.Entity("PizzaWorldPro.Domain.Models.Store", b =>
                {
                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            EntityId = 1L,
                            Name = "The Vaticano Pizzas"
                        },
                        new
                        {
                            EntityId = 2L,
                            Name = "The Corner Pizzas"
                        },
                        new
                        {
                            EntityId = 3L,
                            Name = "The Negozio Pizzas"
                        });
                });

            modelBuilder.Entity("PizzaWorldPro.Domain.Models.Toppings", b =>
                {
                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ItemPrice")
                        .HasColumnType("float");

                    b.HasKey("EntityId");

                    b.ToTable("Toppings");

                    b.HasData(
                        new
                        {
                            EntityId = 1L,
                            ItemName = "Pineapple",
                            ItemPrice = 1.5
                        },
                        new
                        {
                            EntityId = 2L,
                            ItemName = "Ham",
                            ItemPrice = 0.80000000000000004
                        },
                        new
                        {
                            EntityId = 3L,
                            ItemName = "Mozarella",
                            ItemPrice = 0.98999999999999999
                        },
                        new
                        {
                            EntityId = 4L,
                            ItemName = "Green Olives",
                            ItemPrice = 0.75
                        },
                        new
                        {
                            EntityId = 5L,
                            ItemName = "Tomatoes",
                            ItemPrice = 1.0
                        },
                        new
                        {
                            EntityId = 6L,
                            ItemName = "Pepperoni",
                            ItemPrice = 1.25
                        },
                        new
                        {
                            EntityId = 7L,
                            ItemName = "Mushrooms",
                            ItemPrice = 1.1000000000000001
                        },
                        new
                        {
                            EntityId = 8L,
                            ItemName = "Onions",
                            ItemPrice = 0.55000000000000004
                        },
                        new
                        {
                            EntityId = 9L,
                            ItemName = "Bacon",
                            ItemPrice = 1.25
                        },
                        new
                        {
                            EntityId = 10L,
                            ItemName = "Green Peppers",
                            ItemPrice = 0.78000000000000003
                        },
                        new
                        {
                            EntityId = 12L,
                            ItemName = "Red Peppers",
                            ItemPrice = 0.65000000000000002
                        },
                        new
                        {
                            EntityId = 13L,
                            ItemName = "Basil",
                            ItemPrice = 3.0
                        },
                        new
                        {
                            EntityId = 14L,
                            ItemName = "Baby Spinach",
                            ItemPrice = 2.0
                        },
                        new
                        {
                            EntityId = 15L,
                            ItemName = "Black Olives",
                            ItemPrice = 1.0
                        },
                        new
                        {
                            EntityId = 16L,
                            ItemName = "Cheese-feta",
                            ItemPrice = 2.0
                        });
                });

            modelBuilder.Entity("PizzaWorldPro.Domain.Models.User", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SelectedStoreEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("SelectedStoreEntityId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("APizzaModelToppings", b =>
                {
                    b.HasOne("PizzaWorldPro.Domain.Abstracts.APizzaModel", null)
                        .WithMany()
                        .HasForeignKey("PizzaEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PizzaWorldPro.Domain.Models.Toppings", null)
                        .WithMany()
                        .HasForeignKey("PizzaToppingsEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PizzaWorldPro.Domain.Abstracts.APizzaModel", b =>
                {
                    b.HasOne("PizzaWorldPro.Domain.Models.Crust", "Crust")
                        .WithMany("Pizza")
                        .HasForeignKey("CrustEntityId");

                    b.HasOne("PizzaWorldPro.Domain.Models.Order", null)
                        .WithMany("Pizzas")
                        .HasForeignKey("OrderEntityId");

                    b.HasOne("PizzaWorldPro.Domain.Models.Size", "Size")
                        .WithMany("Pizza")
                        .HasForeignKey("SizeEntityId");

                    b.Navigation("Crust");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("PizzaWorldPro.Domain.Models.Order", b =>
                {
                    b.HasOne("PizzaWorldPro.Domain.Models.Store", null)
                        .WithMany("Orders")
                        .HasForeignKey("StoreEntityId");

                    b.HasOne("PizzaWorldPro.Domain.Models.User", null)
                        .WithMany("Orders")
                        .HasForeignKey("UserEntityId");
                });

            modelBuilder.Entity("PizzaWorldPro.Domain.Models.User", b =>
                {
                    b.HasOne("PizzaWorldPro.Domain.Models.Store", "SelectedStore")
                        .WithMany()
                        .HasForeignKey("SelectedStoreEntityId");

                    b.Navigation("SelectedStore");
                });

            modelBuilder.Entity("PizzaWorldPro.Domain.Models.Crust", b =>
                {
                    b.Navigation("Pizza");
                });

            modelBuilder.Entity("PizzaWorldPro.Domain.Models.Order", b =>
                {
                    b.Navigation("Pizzas");
                });

            modelBuilder.Entity("PizzaWorldPro.Domain.Models.Size", b =>
                {
                    b.Navigation("Pizza");
                });

            modelBuilder.Entity("PizzaWorldPro.Domain.Models.Store", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("PizzaWorldPro.Domain.Models.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
